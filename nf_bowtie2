#!/usr/bin/env nextflow
nextflow.enable.dsl=2

params.outdir       = "./results"
params.genome       = ""
params.bowtie2_args = ''
params.verbose      = false
params.single_end   = false  // default mode is auto-detect. NOTE: params are handed over automatically 

params.list_genomes = false;

params.help = false
// Show help message and exit
if (params.help){
    helpMessage()
    exit 0
}

if (params.list_genomes){
    println ("[WORKLFOW] List genomes selected")
}

if (params.verbose){
    println ("[WORKFLOW] BOWTIE2 ARGS: "      + params.bowtie2_args)
}

include { makeFilesChannel; getFileBaseNames }     from './nf_modules/files.mod.nf'
include { getGenome; listGenomes }                 from './nf_modules/genomes.mod.nf'

if (params.list_genomes){
    listGenomes()  // this lists all available genomes, and exits
}

genome = getGenome(params.genome)

include { BOWTIE2 } from './nf_modules/bowtie2.mod.nf'   params(genome: genome)

file_ch = makeFilesChannel(args)

workflow {

    main:
        BOWTIE2(file_ch, params.outdir, params.bowtie2_args, params.verbose)
    
}

// Since workflows with very long command lines tend to fail to get rendered at all, I was experimenting with a
// minimal execution summary report so we at least know what the working directory was...
workflow.onComplete {

    def msg = """\
        Pipeline execution summary
        ---------------------------
        Jobname     : ${workflow.runName}
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """
    .stripIndent()

    sendMail(to: "${workflow.userName}@ethz.ch", subject: 'Minimal pipeline execution report', body: msg)
}

def helpMessage() {
 
    log.info"""
    >>
    
    This workflow takes in a list of filenames (in FastQ format), and aligns these files to a genome using Bowtie 2 on the
    stone compute cluster at Babraham.

    If you run Bowtie 2 in this stand-alone workflow it is assumed that you know what you are doing, e.g. raw FastQ files should
    have been trimmed appropriately. If called as is, Bowtie 2 is run in default end-to-end mode (we are adding the options
    '--no-unal', and additionally for paired-end files '--no-mixed --no-discordant' to only allow concordant read pair
    alignmnents). To add additional parameters, please consider tool-specific arguments that are compatible with Bowtie 2
    (see '--bowtie2_args' below).

    USAGE:
    
    nf_bowtie2 [options] --genome <genomeID> <input files>
    
    Mandatory arguments:
    ====================

      <input files>                   List of input files, e.g. '*fastq.gz' or '*fq.gz'. In theory, files will automatically be
                                      processed as single-end or paired end files (if file pairs share the same base-name, and
                                      differ only by a different read number, e.g. 'base_name_R1.fastq.gz' and 'base_name_R2.fastq.gz'
                                      (or R3, R4). To run paired-end files in single-end mode, please see '--single_end' below.

      --genome [str]                  Genome build ID to be used for the alignment, e.g. GRCh38 (latest human genome) or GRCm38
                                      (latest mouse genome build). To list all available genomes, see '--list_genomes' below.


    Tool-Specific Options:
    ======================

      --bowtie2_args="[str]"          This option can take any number of options that are compatible with Bowtie 2 to modify its
                                      default mapping behaviour. For more detailed information on available options please refer
                                      to the Bowtie 2 User Guide, or run 'bowtie2 --help'. As an example, to run somewhat more 
                                      stringent alignments for only 1 million sequences, use ' --bowtie2_args="-u 1000000 --score_min L,0,-0.4" '.
                                      Please note that the format ="your options" needs to be strictly adhered to in order to work correctly.
                                      [Default: None]

    Other Options:
    ==============

      --outdir [str]                  Path to the output directory. [Default: current working directory]

      --list_genomes                  List all genome builds that are currently available to choose from. To see this list
                                      of available genomes with more detailed information about paths and indexes, run
                                      the command as '--list_genomes --verbose'
    
      --single_end                    Force files of a read pair to be treated as single-end files. [Default: auto-detect]
      
      --verbose                       More verbose status messages. [Default: OFF]
      --help                          Displays this help message and exits.

    Workflow Options:
    =================

    Please note the single '-' hyphen for the following options!

      -resume                         If a pipeline workflow has been interrupted or stopped (e.g. by accidentally closing a laptop),
                                      this option will attempt to resume the workflow at the point it got interrupted by using
                                      Nextflow's caching mechanism. This may save a lot of time.

      -bg                             Sends the entire workflow into the background, thus disconnecting it from the terminal session.
                                      This option launches a daemon process (which will keep running on the headnode) that watches over
                                      your workflow, and submits new jobs to the SLURM queue as required. Use this option for big pipeline
                                      jobs, or whenever you do not want to watch the status progress yourself. Upon completion, the
                                      pipeline will send you an email with the job details. This option is HIGHLY RECOMMENDED!

      -process.executor=local         Temporarily changes where the workflow is executed to the 'local' machine. See also Nextflow config
                                      file for more details. [Default: slurm] 
    

    <<
    """.stripIndent()

}
