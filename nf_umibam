#!/usr/bin/env nextflow
nextflow.enable.dsl=2


/* ========================================================================================
    OUTPUT DIRECTORY
======================================================================================== */
params.outdir = false
if(params.outdir){
    outdir = params.outdir
} else {
    outdir = '.'
}

/* ========================================================================================
    PARAMETERS
======================================================================================== */
params.verbose     = false
params.single_end  = false
params.dual        = false // params are handed over automatically
params.help        = false
params.umibam_args = ''


/* ========================================================================================
    MESSAGES
======================================================================================== */
// Show help message and exit
if (params.help){
    helpMessage()
    exit 0
}

if (params.verbose){
    println ("[WORKFLOW] UMIBAM ARGS ARE: " + params.umibam_args)
}


/* ========================================================================================
    FILES CHANNEL
======================================================================================== */
file_ch = Channel .fromPath(args) // UmiBam expects just the path to be passed in
    .map{f-> [ f.baseName, f] } // transforming a channel with Paths from *.bam to a tuple with [basename,[basename.bam]]


/* ========================================================================================
    WORKFLOW
======================================================================================== */
include { UMIBAM } from './nf_modules/umibam.mod.nf'
    
workflow {

    main:
        UMIBAM (file_ch, outdir, params.umibam_args, params.verbose)

}

workflow.onComplete {

    def msg = """\
        Pipeline execution summary
        ---------------------------
        Jobname     : ${workflow.runName}
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """
    .stripIndent()

    sendMail(to: "${workflow.userName}@ethz.ch", subject: 'Minimal pipeline execution report', body: msg)
}


/* ========================================================================================
    HELP MESSAGE
======================================================================================== */
def helpMessage() {
 
    log.info"""
    >>

    
    SYNOPSIS:

    This single-tool workflow takes in a list of filenames in BAM format and de-duplicates them based on mapping position
    as well as the UMI sequence.

    If you run UmiBam in this stand-alone workflow it is assumed that you know what you are doing, i.e. BAM files need to contain
    a UMI sequence as the last entry of each read ID, separated by a colon, e.g. @HWUSI:...:CAGTTAGC. If called as is, UmiBam
    is run in default mode (we are adding the option '--umi' unless the file is specified to contain dual UMIs (see option '--dual').
    To add additional parameters, please consider tool-specific arguments that are compatible with UmiBam (see '--umibam_args' below).


    ==============================================================================================================


    USAGE:

    nf_umibam [options] <input BAM files>
    

    Mandatory arguments:
    ====================

      <input BAM files>               List of input files in BAM format, e.g. '*bam'. The files are automatically processed as
                                      single-end or paired end files (determined via the @PG line).


    Tool-specific options:
    ======================

      --umibam_args="[str]"           This option can take any number of options that are compatible with UmiBam to modify its
                                      default deduplication behaviour. For more detailed information on available options please refer
                                      to the UmiBam User Guide, or run 'umibam --help' on the command line. As an example, to allow
                                      up to 1 mismatch for the UMI sequence, use: 
                                      ' --umibam_args="--mismatches 1" '. Please note that the format ="your options" needs to be
                                      strictly adhered to in order to work correctly. [Default: None]


    Other options:
    ==============

      --dual                          This option can be used instead of the default option '--umi'. Please refer to the UmiBam.
                                      [Default: OFF]
      
      --outdir [str]                  Path to the output directory. [Default: current working directory]
    
      --verbose                       More verbose status messages. [Default: OFF]
      --help                          Displays this help message and exits.


    Workflow options:
    =================

    Please note the single '-' hyphen for the following options!

      -resume                         If a pipeline workflow has been interrupted or stopped (e.g. by accidentally closing a laptop),
                                      this option will attempt to resume the workflow at the point it got interrupted by using
                                      Nextflow's caching mechanism. This may save a lot of time.

      -bg                             Sends the entire workflow into the background, thus disconnecting it from the terminal session.
                                      This option launches a daemon process (which will keep running on the headnode) that watches over
                                      your workflow, and submits new jobs to the SLURM queue as required. Use this option for big pipeline
                                      jobs, or whenever you do not want to watch the status progress yourself. Upon completion, the
                                      pipeline will send you an email with the job details. This option is HIGHLY RECOMMENDED!

      -process.executor=local         Temporarily changes where the workflow is executed to the 'local' machine. See also the nextflow.config
                                      file for more details. [Default: slurm] 
    
    <<
    """.stripIndent()
}
