#!/usr/bin/env nextflow
nextflow.enable.dsl=2

params.outdir     = "./results"
params.genome     = ""
params.verbose    = false
params.single_end = false  // default mode is auto-detect. NOTE: params are handed over automatically  

params.samtools_sort_args  = ''
params.samtools_index_args = ''

params.help = false
// Show help message and exit
if (params.help){
    helpMessage()
    exit 0
}

if (params.verbose){
    println ("[WORKFLOW] SAMTOOLS SORT ARGS: "           + params.samtools_sort_args)
    println ("[WORKFLOW] SAMTOOLS INDEX ARGS:"           + params.samtools_index_args)

}

include { makeFilesChannel; getFileBaseNames }    from './nf_modules/files.mod.nf'
include { SAMTOOLS_SORT;SAMTOOLS_INDEX }          from './nf_modules/samtools.mod.nf'

file_ch = Channel.fromPath(args)     // UmiBam expects just the path to be passed in
// file_ch.subscribe{  println "Got: $it"  }
workflow {

    main:
        SAMTOOLS_SORT  (file_ch, params.outdir, params.samtools_sort_args, params.verbose)
        SAMTOOLS_INDEX (SAMTOOLS_SORT.out.bam, params.outdir, params.samtools_sort_args, params.verbose)
}

// Since workflows with very long command lines tend to fail to get rendered at all, I was experimenting with a
// minimal execution summary report so we at least know what the working directory was...
workflow.onComplete {

    def msg = """\
        Pipeline execution summary
        ---------------------------
        Jobname     : ${workflow.runName}
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """
    .stripIndent()

    sendMail(to: "${workflow.userName}@ethz.ch", subject: 'Minimal pipeline execution report', body: msg)
}

def helpMessage() {
 
    log.info"""
    >>


    SYNOPSIS:

    This workflow takes in a list of filenames (in BAM format), and then 

    - sorts these files by genomic coordinates (samtools sort), and finally
    - creates a BAM index of the file (samtools index)
    
    on the Babraham stone compute cluster. Currently, both the original BAM file as well as a sorted version (ending in "_sorted.bam")
    will be kept.

              ==============================================================================================================


    USAGE:
    
    nf_sortIndexBAM [options] <input files>
    
    Mandatory arguments:
    ====================

      <input_files>                   List of input files in BAM format, e.g. '*bam'.
                                      
    Tool-specific options:
    ======================

      --samtools_sort_args="[str]"    This option can take any number of options that are compatible with 'samtools sort' to modify its default
                                      behaviour. For more detailed information on available options please refer to the Samtools documentation,
                                      or run 'samtools sort' on the command line. Please note that the format ="your options" needs to be
                                      strictly adhered to in order to work correctly. [Default: None]

      --samtools_index_args="[str]"   This option can take any number of options that are compatible with 'samtools index' to modify its
                                      default behaviour. For more detailed information on available options please refer
                                      to the Samtools documentation, or run 'samtools index' on the command line. Please note that the format 
                                      ="your options" needs to be strictly adhered to in order to work correctly. [Default: None]

    Other options:
    ==============

      --outdir [str]                  Path to the output directory. [Default: current working directory]

      --verbose                       More verbose status messages. [Default: OFF]
      --help                          Displays this help message and exits.

    Workflow options:
    =================

    Please note the single '-' hyphen for the following options!

      -resume                         If a pipeline workflow has been interrupted or stopped (e.g. by accidentally closing a laptop),
                                      this option will attempt to resume the workflow at the point it got interrupted by using
                                      Nextflow's caching mechanism. This may save a lot of time.

      -bg                             Sends the entire workflow into the background, thus disconnecting it from the terminal session.
                                      This option launches a daemon process (which will keep running on the headnode) that watches over
                                      your workflow, and submits new jobs to the SLURM queue as required. Use this option for big pipeline
                                      jobs, or whenever you do not want to watch the status progress yourself. Upon completion, the
                                      pipeline will send you an email with the job details. This option is HIGHLY RECOMMENDED!

      -process.executor=local         Temporarily changes where the workflow is executed to the 'local' machine. See also the nextflow.config
                                      file for more details. [Default: slurm] 
    

    <<
    """.stripIndent()

}
